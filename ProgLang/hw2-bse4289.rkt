(define (arg-max fun ls)
  (cond
    ((null? (cdr ls)) (car ls))
    (else (let
              ((max (car ls)))
            (if (> (fun (cadr ls)) (fun max))
                (arg-max fun (cdr ls))
                (arg-max fun (cons max (cddr ls)))
                )
            )
          )
    )
  )

(define (zip . args)
  (if (null? (cdr args))
      (car args)
      (cons (car args) (zip (cdr args)))
      )
  )

(define (unzip ls n)
  (cond
    ((< n 0) '())
    ((<= (length ls) n) '())
    (else (if (zero? n)
              (car ls)
              (unzip (cdr ls) (- n 1))))
    )
  )

(define (intersectlist la lb)
  (if (or (null? la) (null? lb))
      '()
      (letrec
          ((a (car la)) (find (lambda (x l)
                                (cond
                                  ((null? l) '())
                                  ((equal? x (car l)) x)
                                  (else (find x (cdr l)))))))
        (if (or (not (null? (find a (cdr la)))) (null? (find a lb)))
            (intersectlist (cdr la) lb)
            (cons a (intersectlist (cdr la) lb)))
        )
    )
  )

(define (sortedmerge la lb)
  (cond
    ((and (null? la) (null? lb)) '())
    ((null? la) lb)
    ((null? lb) la)
    (else (let
              ((a (car la)) (b (car lb)))
            (if (<= a b)
                (cons a (sortedmerge (cdr la) lb))
                (cons b (sortedmerge la (cdr lb)))
                )
            )
          )
    )
  )

(define (interleave la lb)
  (cond
    ((and (null? la) (null? lb)) '())
    ((null? la) lb)
    ((null? lb) la)
    (else (cons (car la) (cons (car lb) (interleave (cdr la) (cdr lb))))
          )
    )
  )

(define (map2 js ls p fun)
  (cond
    ((not (equal? (length ls) (length js))) (quote "Error: Lists of different size"))
    ((null? ls) '())
    (else (if (p (car js))
              (cons (fun (car ls))
                    (map2 (cdr js) (cdr ls) p fun))
              (cons (car ls)
                    (map2 (cdr js) (cdr ls) p fun))))
    )
  )

(define (edge-list-to-adjacency-list le)
  (if (null? le) '()
      (letrec
          ((beg (caar le)) (end (cadr le))
           (find (lambda (x l)
                    (cond ((null? l) '())
                          ((equal? x (caar l)) (cons (cdar l) (find x (cdr l))))
                          (else (find x (cdr l))))))
           (found (find beg le)))
        (if (null? found) (cons (cons (cons beg '()) (cons end '())) (edge-list-to-adjacency-list (cdr le)))
            '()
        )
      )
  )
  )

(define (adjacency-list-to-edge-list le)
  (if (null? le) '()
      (if (null? (cadar le)) (adjacency-list-to-edge-list (cdr le))
          (let
              ((a (caaar le)) (b (cadar le)))
            (cond
              ((not (null? (cdr b))) (cons (cons a (cons (car b) '())) (adjacency-list-to-edge-list (cons (cons (cons a '()) (cons (cdr b) '())) (cdr le)))))
              (else (cons (cons a (cons (car b) '())) (adjacency-list-to-edge-list (cdr le)))))
            )
          )
      )
  )

